name: Replace JSON custom fields
on:
  workflow_dispatch:
    inputs:
      profile:
        description: 'Select profile'
        default: all
        type: choice
        options:
          - all
          - lol
          - omegalul
      replaceMethodAction:
        description: 'Use find replace Action'
        default: false
        type: boolean
      replaceMethodBash:
        description: 'Use bash script replace'
        default: true
        type: boolean

jobs:
  getProfiles:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.selectedProfiles.outputs.profilesToRun || steps.allProfiles.outputs.profilesToRun }}
    steps:
      - name: Get selected profile
        id: selectedProfiles
        if: ${{ inputs.profile != 'all' }}
        run: |
          echo "profilesToRun=[\"${{ inputs.profile }}\"]" >> $GITHUB_OUTPUT
      - name: Get all profiles
        id: allProfiles
        if: ${{ inputs.profile == 'all' }}
        run: |
          echo "profilesToRun=[\"lol\", \"omegalul\"]" >> $GITHUB_OUTPUT
      - name: Log selected profiles
        run: echo ${{ steps.selectedProfiles.outputs.profilesToRun || steps.allProfiles.outputs.profilesToRun }}

  getMappings:
    if: inputs.replaceMethodAction == true
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.setup.outputs.matrix }}
    steps:
      - name: Setup
        id: setup
        env:
          CONFIG: >-
            [
              {
                "jiraCustomFieldId": "customfield_1",
                "jiraCustomFieldName": "field 1"
              },
              {
                "jiraCustomFieldId": "customfield_2",
                "jiraCustomFieldName": "field 2"
              }
            ]
        run: echo "matrix=$(jq -r -c . <<< "$CONFIG")" >> $GITHUB_OUTPUT
      - name: Check
        run: jq . <<< '${{ steps.setup.outputs.matrix }}'

  replaceCustomFields:
    if: inputs.replaceMethodAction == true
    needs: [getProfiles, getMappings]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include: ${{ fromJSON(needs.getMappings.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v2
      - name: Log field mappings
        env:
          JIRA_CUSTOM_FIELD_ID: ${{ fromJSON(toJSON(matrix)).jiraCustomFieldId }}
          JIRA_CUSTOM_FIELD_NAME: ${{ fromJSON(toJSON(matrix)).jiraCustomFieldName }}
        run: |
          echo "JIRA_CUSTOM_FIELD_ID: [$JIRA_CUSTOM_FIELD_ID]"
          echo "JIRA_CUSTOM_FIELD_NAME: [$JIRA_CUSTOM_FIELD_NAME]"
      - name: Replace JSON fields
        id: replaceJsonFields
        uses: jacobtomlinson/gha-find-replace@v3
        with:
          find: ${{ fromJSON(toJSON(matrix)).jiraCustomFieldName }}
          replace: ${{ fromJSON(toJSON(matrix)).jiraCustomFieldId }}
          include: "**jira.json"
          regex: false
      - name: Print JSON
        run: |
          echo "$(cat lol/jira.json)"

  replaceCustomFieldsWithBash:
    if: inputs.replaceMethodBash == true
    needs: [getProfiles]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        value: ${{ fromJSON(needs.getProfiles.outputs.matrix) }}
    env:
      JIRA_JSON_FILE: "${{ matrix.value }}/jira.json"
    steps:
      - uses: actions/checkout@v2
      - name: Replace custom fields
        run: |
          while read -r line; do
          # comment
            first_char=$(echo "$line" | cut -b1)
            if [[ -n $first_char && $first_char != "#" ]]; then
              plain_text=$(echo "$line" | cut -d= -f1)
              jira_custom_id=$(echo "$line" | cut -d= -f2)
              echo "Replacing $plain_text with $jira_custom_id"
              sed -i -e "s/$plain_text/$jira_custom_id/g" $JIRA_JSON_FILE
            else
              echo "Comment or empty line detected, skipping this line."
            fi
          done < custom-field-mappings.txt
      - name: Print JSON
        run: |
          echo "$(cat $JIRA_JSON_FILE)"